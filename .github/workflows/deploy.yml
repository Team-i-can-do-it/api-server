  name: Deploy to EC2 via ECR

  on:
    push:
      branches:
        - prototype

  jobs:
    deploy:
      runs-on: ubuntu-latest
      steps:
        # 1. 코드 체크아웃
        - name: Github Repository 불러오기
          uses: actions/checkout@v4

        - name: JDK 17버전 설치
          uses: actions/setup-java@v4
          with:
            distribution: temurin
            java-version: 17

        - name: 테스트 및 빌드하기
          run: ./gradlew clean build

        # 2. AWS CLI 인증
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESSKEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRURITY_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}

        # 3. ECR 로그인
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2

        # 4. Docker 이미지 빌드 & 푸시
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Docker 이미지 생성 (ARM64)
          run: |
            docker buildx create --use
            docker buildx build --platform linux/arm64 -t ${{ secrets.ECR_REPOSITORY }} --load .

        - name: Docker 이미지에 Tag 붙이기
          run: docker tag ${{ secrets.ECR_REPOSITORY }} ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:latest

        - name: ECR에 Docker 이미지 Push하기
          run: docker push ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:latest

  #      # 4. Docker 이미지 빌드 & 푸시
  #      - name: Build, tag, and push image to ECR
  #        env:
  #          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  #          IMAGE_TAG: latest
  #        run: |
  #          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
  #          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

        # 5. EC2로 SSH 접속하여 배포
        - name: Deploy on EC2
          uses: appleboy/ssh-action@v1.0.0
          with:
            host: ${{ secrets.EC2_HOST }}
            username: ${{ secrets.EC2_USER }}
            key: ${{ secrets.EC2_KEY }}
            script: |
              aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
                | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
              docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:latest
              
              docker stop my-app || true
              docker rm my-app || true
              
              echo "${{ secrets.ENV }}" | base64 -d > .env
              chmod 600 .env # .env 
              
              docker run -d --name my-app -p 80:8080 --env-file .env ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:latest
              
              echo "=== .env 파일 내용 (마스킹) ==="
              cat .env | sed 's/=.*/=***/' # 비밀번호는 마스킹
              
              
                    # 컨테이너 내 환경변수 확인
              sleep 5
              echo "=== 컨테이너 내 환경변수 확인 ==="
              docker exec my-app env | grep -E "(DB_|OPENAI_|SPRING_)" || echo "환경변수 없음"
      
              echo "=== 컨테이너 로그 확인 ==="
              docker logs my-app --tail 30
         
              rm .env
