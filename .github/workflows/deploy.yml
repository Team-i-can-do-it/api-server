name: Deploy to EC2 via ECR

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. 코드 체크아웃
      - name: Github Repository 불러오기
        uses: actions/checkout@v4

      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: 테스트 및 빌드하기
        run: ./gradlew clean build

      # 2. AWS CLI 인증
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESSKEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRURITY_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 4. Docker 이미지 빌드 & 푸시
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker 이미지 생성 (ARM64)
        run: |
          docker buildx create --use
          docker buildx build --platform linux/arm64 -t ${{ secrets.ECR_REPOSITORY }} --load .

      - name: Docker 이미지에 Tag 붙이기
        run: docker tag ${{ secrets.ECR_REPOSITORY }} ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:latest

      - name: ECR에 Docker 이미지 Push하기
        run: docker push ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:latest

      # 5. EC2로 SSH 접속하여 배포
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            
            cd /home/ubuntu/compose
            
            echo "${{ secrets.ENV }}" | base64 -d > .env
            chmod 600 .env
            
            docker compose down || true
            
            docker compose pull
            docker compose up -d
            
            sleep 20
            echo "=== Docker Compose 서비스 상태 ==="
            docker ps
            
            echo "=== 컨테이너 로그 확인 ==="
            docker compose logs --tail 30
            
            rm .env
